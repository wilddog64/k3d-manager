controller:
  sidecars:
    configAutoReload:
      enabled: true
  podAnnotations:
    sidecar.istio.io/inject: "true"
    sidecar.istio.io/rewriteAppHTTPProbers: "true"
    proxy.istio.io/config: '{"holdApplicationUntilProxyStarts": true}'
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "jenkins-jcasc-reader"
    vault.hashicorp.com/agent-pre-populate-only: "true"
    vault.hashicorp.com/agent-inject-secret-ad-ldap-bind-password: "secret/data/jenkins/ad-ldap"
    vault.hashicorp.com/agent-inject-template-ad-ldap-bind-password: |-
      {{ "{{" }}- with secret "secret/data/jenkins/ad-ldap" -{{ "}}" }}
      {{ "{{" }}- .Data.data.password -{{ "}}" }}
      {{ "{{" }}- end -{{ "}}" }}
    vault.hashicorp.com/agent-inject-secret-ad-ldap-bind-username: "secret/data/jenkins/ad-ldap"
    vault.hashicorp.com/agent-inject-template-ad-ldap-bind-username: |-
      {{ "{{" }}- with secret "secret/data/jenkins/ad-ldap" -{{ "}}" }}
      {{ "{{" }}- .Data.data.username -{{ "}}" }}
      {{ "{{" }}- end -{{ "}}" }}
  image:
    registry: docker.io
    repository: jenkins/jenkins
    tag: lts
    pullPolicy: IfNotPresent
  installPlugins:
    - active-directory
    - configuration-as-code
    - credentials
    - git
    - hashicorp-vault-plugin
    - job-dsl
    - kubernetes
    - matrix-auth
    - matrix-project
    - metrics
    - mina-sshd-api-common
    - mina-sshd-api-core
    - okhttp-api
    - parameterized-trigger
    - workflow-aggregator
    - workflow-multibranch
    - pipeline-build-step
    - pipeline-stage-view
    - pipeline-utility-steps
    - plain-credentials
    - plugin-util-api
    - script-security
    - ssh-credentials
    - ssh-slaves
    - sshd
  containerEnv:
    - name: JENKINS_ADMIN_USER
      value: "jenkins-admin"
    - name: JENKINS_ADMIN_PASS
      valueFrom:
        secretKeyRef:
          name: jenkins
          key: jenkins-admin-password
    - name: JAVA_OPTS
      value: "-Djenkins.install.runSetupWizard=false"
    - name: JENKINS_OPTS
      value: "--httpPort=8080 --httpListenAddress=0.0.0.0"

  serviceAccount:
    create: true
    name: jenkins

  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000

  persistence:
    enabled: true
    existingClaim: jenkins-home

  serviceType: ClusterIP
  servicePort: 8081
  targetPort: 8080
  containerPort: 8080
  servicePortName: http

  healthProbes: true
  probes:
    startupProbe:
      httpGet:
        path: /login
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 90
      periodSeconds: 5
      failureThreshold: 180
    readinessProbe:
      httpGet:
        path: /login
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 90
      periodSeconds: 5
      failureThreshold: 120
    livenessProbe:
      httpGet:
        path: /login
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 90
      periodSeconds: 5
      failureThreshold: 60
  JCasC:
    defaultConfig: false
    configScripts:
      00-location: |
        unclassified:
          location:
            url: "https://jenkins.dev.local.me/"      # trailing slash required
            adminAddress: "jenkins-admin@me.com"
      01-security: |
        jenkins:
          disabledAdministrativeMonitors:
            - "jenkins.security.ReverseProxySetupMonitor"
          authorizationStrategy:
            projectMatrix:
              permissions:
                - "Overall/Read:${JENKINS_ADMIN_USER}"
                - "Overall/Administer:${JENKINS_ADMIN_USER}"
                - "Overall/Read:group:it devops"
                - "Overall/Administer:group:it devops"
          securityRealm:
            activeDirectory:
              bindPassword: "${file:/vault/secrets/ad-ldap-bind-password}"
              cache:
                size: 50
                ttl: 3600
              customDomain: true
              domains:
                - bindName: "${file:/vault/secrets/ad-ldap-bind-username}"
                  bindPassword: "${file:/vault/secrets/ad-ldap-bind-password}"
                  name: "pacific.costcotravel.com"
                  tlsConfiguration: "TRUST_ALL_CERTIFICATES"
              groupLookupStrategy: "TOKENGROUPS"
              internalUsersDatabase:
                jenkinsInternalUser: "jenkins-admin"
              removeIrrelevantGroups: false
              requireTLS: true
              startTls: true
