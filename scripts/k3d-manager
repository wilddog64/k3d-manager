#!/usr/bin/env bash

# k3d-manager - K3d Kubernetes cluster setup with Istio and storage configuration
#
# USAGE:
#   ./k3d-manager                    # Run default installation workflow
#   ./k3d-manager <function> [args]  # Run specific function
#
# FUNCTIONS:
#   install_colima                   # Install Colima container runtime (macOS)
#   install_docker                   # Install Docker CLI and configure it
#   install_k3d                      # Install K3d Kubernetes distribution
#   create_k3d_cluster <name>        # Create cluster with specified name
#   configure_k3d_cluster_istio      # Install Istio on the cluster
#   install_helm                     # Install Helm package manager
#   install_smb_csi_driver           # Install SMB CSI driver (Linux only)
#   create_nfs_share                 # Setup NFS export on host
#
# ISTIO TESTING:
#   test_istio                       # Istio functionality tests
#
# NFS DEBUGGING (for issue #1383 - github.com/k3d-io/k3d/issues/1383):
#   test_nfs_connectivity            # Test network connectivity to NFS
#   test_nfs_direct                  # Test direct NFS mounting
#
# Note: The above script functions list in NFS DEBUGGING section do not address K3d NFS mounting issues on macOS. The code leave here for the reference purpose only

# ensure we are running bash
if [[ -n $"BASH_VERSION" ]]; then
   echo "running under bash version ${BASH_VERSION}"
elif [[ -n $"ZSH_VERSION" ]]; then
   echo "running under zsh version ${ZSH_VERSION}"
fi

DEBUG=${DEBUG:-0}
if [[ $DEBUG -gt 0 ]]; then
      set -xv
fi

ENABLE_TRACE=${ENABLE_TRACE:-0}
if [[ $ENABLE_TRACE -gt 0 ]]; then
   export PS4='+ $(date "+%H:%M:%S") - pid=$$ ${BASH_SOURCE##*/}:${LINENO}:${FUNCNAME[0]}() '
   exec 19> /tmp/k3d.trace
   trap 'set +x 2>/dev/null; exec 19>&- 2>/dev/null || true' EXIT
   export BASH_XTRACEFD=19
   set -x
fi

# resolve symlink so that we can figure out where script is actually located
SOURCE="${BASH_SOURCE[0]}"
while [ -L "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
PLUGINS_DIR="${SCRIPT_DIR}/plugins"

# load our library functions
source "${SCRIPT_DIR}/lib/system.sh"
source "${SCRIPT_DIR}/lib/test.sh"
source "${SCRIPT_DIR}/lib/core.sh"

## -- main --
# Command line argument handling
if [[ $# -gt 0 ]]; then
    function_name=$1
    shift  # Remove the function name from the arguments

    if [[ "$(type -t "$function_name")" == "function" ]]; then
        # Call the function with remaining arguments
        $function_name "$@"
    else
         _try_load_plugin "$function_name" "$@"
    fi
fi
