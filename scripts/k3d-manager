#!/usr/bin/env bash

# k3d-manager - K3d Kubernetes cluster setup with Istio and storage configuration
#
# USAGE:
#   ./k3d-manager                    # Show usage and list core functions
#   ./k3d-manager <function> [args]  # Run specific function

# ensure we are running bash
if [[ -n "$BASH_VERSION" ]]; then
   echo "running under bash version ${BASH_VERSION}"
elif [[ -n "$ZSH_VERSION" ]]; then
   echo "running under zsh version ${ZSH_VERSION}"
fi

DEBUG=${DEBUG:-0}
if [[ $DEBUG -gt 0 ]]; then
      set -xv
fi

ENABLE_TRACE=${ENABLE_TRACE:-0}
if [[ $ENABLE_TRACE -gt 0 ]]; then
   export PS4='+ $(date "+%H:%M:%S") - pid=$$ ${BASH_SOURCE##*/}:${LINENO}:${FUNCNAME[0]}() '
   exec 19> /tmp/k3d.trace
   trap 'set +x 2>/dev/null; exec 19>&- 2>/dev/null || true' EXIT
   export BASH_XTRACEFD=19
   set -x
fi

# resolve symlink so that we can figure out where script is actually located
SOURCE="${BASH_SOURCE[0]}"
while [ -L "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
PLUGINS_DIR="${SCRIPT_DIR}/plugins"

# load our library functions
source "${SCRIPT_DIR}/lib/system.sh"
source "${SCRIPT_DIR}/lib/cluster_provider.sh"
source "${SCRIPT_DIR}/lib/test.sh"
source "${SCRIPT_DIR}/lib/core.sh"

if [[ -n "${CLUSTER_PROVIDER:-}" ]]; then
    export K3D_MANAGER_PROVIDER="${K3D_MANAGER_PROVIDER:-$CLUSTER_PROVIDER}"
    export K3D_MANAGER_CLUSTER_PROVIDER="${K3D_MANAGER_CLUSTER_PROVIDER:-$CLUSTER_PROVIDER}"
    if declare -f cluster_provider_set_active >/dev/null 2>&1; then
        cluster_provider_set_active "$(printf '%s' "$CLUSTER_PROVIDER" | tr '[:upper:]' '[:lower:]')"
    fi
elif [[ -n "${K3D_MANAGER_PROVIDER:-}" ]]; then
    export CLUSTER_PROVIDER="$K3D_MANAGER_PROVIDER"
    export K3D_MANAGER_CLUSTER_PROVIDER="${K3D_MANAGER_CLUSTER_PROVIDER:-$K3D_MANAGER_PROVIDER}"
    if declare -f cluster_provider_set_active >/dev/null 2>&1; then
        cluster_provider_set_active "$(printf '%s' "$K3D_MANAGER_PROVIDER" | tr '[:upper:]' '[:lower:]')"
    fi
fi

function _usage() {
    local test_suites
    test_suites=$(find "${SCRIPT_DIR}/tests" -type f -name '*.bats' \
        -exec basename {} .bats \; | sort | paste -sd '|' -)
    local base_suites="all|lib|core|plugins"
    if [[ -n "${test_suites}" ]]; then
        test_suites="${base_suites}|${test_suites}"
    else
        test_suites="${base_suites}"
    fi

    local provider="${CLUSTER_PROVIDER:-$(_default_cluster_provider)}"

    cat <<EOF
Usage: ./k3d-manager <function> [args]

Available core functions:
$(declare -F | awk '{print $3}' | grep -v '^_' | sort | sed 's/^/  /')

Plugin functions are loaded on demand from scripts/plugins.

Cluster provider:
  Current: ${provider}
  Override by exporting CLUSTER_PROVIDER (macOS defaults to k3d).

Subcommands:
  test ${test_suites}   Run BATS tests
EOF
}

function test() {
    if [[ "$1" == "-h" || "$1" == "--help" || -z "$1" ]]; then
        local test_suites
        test_suites=$(find "${SCRIPT_DIR}/tests" -type f -name '*.bats' \
            -exec basename {} .bats \; | sort | paste -sd '|' -)
        local base_suites="all|lib|core|plugins"
        if [[ -n "${test_suites}" ]]; then
            test_suites="${base_suites}|${test_suites}"
        else
            test_suites="${base_suites}"
        fi
        cat <<EOF
Usage: test ${test_suites}
Run BATS tests
EOF
        return 0
    fi

    _ensure_bats
    local suite="$1"
    local search_dirs=("${SCRIPT_DIR}/tests/lib" "${SCRIPT_DIR}/tests/core" "${SCRIPT_DIR}/tests/plugins")
    local -a tests=()
    # Populate array without mapfile for compatibility with Bash 3
    while IFS= read -r test_file; do
        tests+=("$test_file")
    done < <(find "${search_dirs[@]}" -maxdepth 1 -type f -name '*.bats' | sort)

    if [[ "$suite" == "all" ]]; then
        bats "${tests[@]}"
        return
    fi

    if [[ "$suite" == "lib" || "$suite" == "core" || "$suite" == "plugins" ]]; then
        local -a suite_tests=()
        local dir="${SCRIPT_DIR}/tests/${suite}"
        while IFS= read -r test_file; do
            suite_tests+=("$test_file")
        done < <(find "$dir" -maxdepth 1 -type f -name '*.bats' | sort)

        if [[ ${#suite_tests[@]} -eq 0 ]]; then
            echo "No test suites found in '$suite'." >&2
            return 1
        fi

        bats "${suite_tests[@]}"
        return
    fi

    for test_file in "${tests[@]}"; do
        if [[ "$(basename "$test_file" .bats)" == "$suite" ]]; then
            bats "$test_file"
            return
        fi
    done

    echo "No test suite matching '$suite'. Available suites:" >&2
    printf '  %s\n' "${tests[@]##*/}" | sed 's/\.bats$//' >&2
    return 1
}

## -- main --
if [[ $# -eq 0 ]]; then
    _usage
    exit 0
fi

function_name=$1
shift  # Remove the function name from the arguments

if [[ "$(type -t "$function_name")" == "function" ]]; then
    # Call the function with remaining arguments
    $function_name "$@"
else
    _try_load_plugin "$function_name" "$@"
fi
